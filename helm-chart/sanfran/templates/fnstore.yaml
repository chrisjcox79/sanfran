## Functions Storage Service

apiVersion: v1
kind: Service
metadata:
  name: {{ template "sanfran.fullname" . }}-svc
  labels:
    app: {{ template "sanfran.fullname" . }}-svc
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: service
      port: 9000
  selector:
    app: {{ template "sanfran.fullname" . }}

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "sanfran.fullname" . }}
  labels:
    app: {{ template "sanfran.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "sanfran.fullname" . }}-svc
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "sanfran.fullname" . }}
  template:
    metadata:
      name: {{ template "sanfran.fullname" . }}
      labels:
        app: {{ template "sanfran.fullname" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
    spec:
      volumes:
        - name: minio-user
          secret:
            secretName: {{ template "sanfran.fullname" . }}-user
        - name: minio-server-config
          configMap:
            name: {{ template "sanfran.fullname" . }}-config-cm
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
      containers:
        - name: minio
          image: minio/minio:{{ .Values.fnstore.tag }}
          args: ["server", "/data"]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: minio-server-config
              mountPath: "/root/.minio/"
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "sanfran.fullname" . }}-user
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "sanfran.fullname" . }}-user
                  key: secretkey
  volumeClaimTemplates:
    - metadata:
        name: data
        annotations:
          {{- if .Values.fnstore.storage.class }}
          volume.beta.kubernetes.io/storage-class: {{ .Values.fnstore.storage.class }}
          {{- else }}
          volume.alpha.kubernetes.io/storage-class: default
          {{- end }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.fnstore.storage.size }}

---
{{ $accessKey := .Values.fnstore.accessKey | default (randAlphaNum 32) | b64enc }}
{{ $secretKey := .Values.fnstore.secretKey | default (randAlphaNum 32) | b64enc }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ template "sanfran.fullname" . }}-user
  labels:
    app: {{ template "sanfran.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
type: Opaque
data:
  accesskey: {{ $accessKey }}
  secretkey: {{ $secretKey }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "sanfran.fullname" . }}-config-cm
  labels:
    app: {{ template "sanfran.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": {{ $accessKey | quote }},
        "secretKey": {{ $secretKey | quote }}
      },
      "region": "us-east-1",
      "browser": "on",
      "domain": "",
      "logger": {
        "console": {
          "enable": true
        },
        "file": {
          "enable": false,
          "fileName": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": [],
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": ""
          }
        }
      }
    }